/* Generated By:JavaCC: Do not edit this line. LexicoSintacticoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexicoSintacticoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VAR = 1;
  /** RegularExpression Id. */
  int FUNCTION = 2;
  /** RegularExpression Id. */
  int PROMPT = 3;
  /** RegularExpression Id. */
  int WRITE = 4;
  /** RegularExpression Id. */
  int WHILE = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int RETURN = 7;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int CHARS = 9;
  /** RegularExpression Id. */
  int BOOL = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int SUMA = 13;
  /** RegularExpression Id. */
  int POST_DECREMENTO = 14;
  /** RegularExpression Id. */
  int MAYOR = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int ASIG = 17;
  /** RegularExpression Id. */
  int COMA = 18;
  /** RegularExpression Id. */
  int LLAVE_A = 19;
  /** RegularExpression Id. */
  int LLAVE_C = 20;
  /** RegularExpression Id. */
  int PAREN_A = 21;
  /** RegularExpression Id. */
  int PAREN_C = 22;
  /** RegularExpression Id. */
  int ID = 23;
  /** RegularExpression Id. */
  int CADENA = 24;
  /** RegularExpression Id. */
  int DECIMAL = 25;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"var\"",
    "\"function\"",
    "\"prompt\"",
    "\"write\"",
    "\"while\"",
    "\"if\"",
    "\"return\"",
    "\"int\"",
    "\"chars\"",
    "\"bool\"",
    "\"true\"",
    "\"false\"",
    "\"+\"",
    "\"--\"",
    "\">\"",
    "\"&&\"",
    "\"=\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "<ID>",
    "<CADENA>",
    "<DECIMAL>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\n\"",
    "<token of kind 31>",
    "<token of kind 32>",
  };

}
